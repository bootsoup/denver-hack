{"abi":[{"type":"function","name":"verify","inputs":[{"name":"seal","type":"bytes","internalType":"bytes"},{"name":"","type":"bytes32","internalType":"bytes32"},{"name":"postStateDigest","type":"bytes32","internalType":"bytes32"},{"name":"","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"pure"},{"type":"function","name":"verify_integrity","inputs":[{"name":"receipt","type":"tuple","internalType":"struct Receipt","components":[{"name":"seal","type":"bytes","internalType":"bytes"},{"name":"claim","type":"tuple","internalType":"struct ReceiptClaim","components":[{"name":"preStateDigest","type":"bytes32","internalType":"bytes32"},{"name":"postStateDigest","type":"bytes32","internalType":"bytes32"},{"name":"exitCode","type":"tuple","internalType":"struct ExitCode","components":[{"name":"system","type":"uint8","internalType":"enum SystemExitCode"},{"name":"user","type":"uint8","internalType":"uint8"}]},{"name":"input","type":"bytes32","internalType":"bytes32"},{"name":"output","type":"bytes32","internalType":"bytes32"}]}]}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"pure"}],"bytecode":{"object":"0x608060405234801561001057600080fd5b50610364806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80631bb8068f1461003b5780636efef00914610062575b600080fd5b61004e6100493660046101d4565b610075565b604051901515815260200160405180910390f35b61004e6100703660046102a6565b610093565b80515160009015801561008d57506020808301510151155b92915050565b6000841580156100a1575082155b9695505050505050565b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff811182821017156100e4576100e46100ab565b60405290565b6040805190810167ffffffffffffffff811182821017156100e4576100e46100ab565b604051601f8201601f1916810167ffffffffffffffff81118282101715610136576101366100ab565b604052919050565b600081830360c081121561015157600080fd5b6101596100c1565b915082358252602083013560208301526040603f198201121561017b57600080fd5b506101846100ea565b60408301356003811061019657600080fd5b8152606083013560ff811681146101ac57600080fd5b80602083015250806040830152506080820135606082015260a0820135608082015292915050565b600060208083850312156101e757600080fd5b823567ffffffffffffffff808211156101ff57600080fd5b9084019060e0828703121561021357600080fd5b61021b6100ea565b82358281111561022a57600080fd5b8301601f8101881361023b57600080fd5b80358381111561024d5761024d6100ab565b61025f601f8201601f1916870161010d565b9350808452888682840101111561027557600080fd5b80868301878601376000908401860152508181526102958784860161013e565b848201528094505050505092915050565b6000806000806000608086880312156102be57600080fd5b853567ffffffffffffffff808211156102d657600080fd5b818801915088601f8301126102ea57600080fd5b8135818111156102f957600080fd5b89602082850101111561030b57600080fd5b60209283019a90995091880135976040810135975060600135955090935050505056fea26469706673582212207e19e0299c90da636480362882c5a1985215c1de271dfff949baf91695a9fb0364736f6c63430008150033","sourceMap":"986:799:29:-:0;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x608060405234801561001057600080fd5b50600436106100365760003560e01c80631bb8068f1461003b5780636efef00914610062575b600080fd5b61004e6100493660046101d4565b610075565b604051901515815260200160405180910390f35b61004e6100703660046102a6565b610093565b80515160009015801561008d57506020808301510151155b92915050565b6000841580156100a1575082155b9695505050505050565b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff811182821017156100e4576100e46100ab565b60405290565b6040805190810167ffffffffffffffff811182821017156100e4576100e46100ab565b604051601f8201601f1916810167ffffffffffffffff81118282101715610136576101366100ab565b604052919050565b600081830360c081121561015157600080fd5b6101596100c1565b915082358252602083013560208301526040603f198201121561017b57600080fd5b506101846100ea565b60408301356003811061019657600080fd5b8152606083013560ff811681146101ac57600080fd5b80602083015250806040830152506080820135606082015260a0820135608082015292915050565b600060208083850312156101e757600080fd5b823567ffffffffffffffff808211156101ff57600080fd5b9084019060e0828703121561021357600080fd5b61021b6100ea565b82358281111561022a57600080fd5b8301601f8101881361023b57600080fd5b80358381111561024d5761024d6100ab565b61025f601f8201601f1916870161010d565b9350808452888682840101111561027557600080fd5b80868301878601376000908401860152508181526102958784860161013e565b848201528094505050505092915050565b6000806000806000608086880312156102be57600080fd5b853567ffffffffffffffff808211156102d657600080fd5b818801915088601f8301126102ea57600080fd5b8135818111156102f957600080fd5b89602082850101111561030b57600080fd5b60209283019a90995091880135976040810135975060600135955090935050505056fea26469706673582212207e19e0299c90da636480362882c5a1985215c1de271dfff949baf91695a9fb0364736f6c63430008150033","sourceMap":"986:799:29:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1496:287;;;;;;:::i;:::-;;:::i;:::-;;;3114:14:37;;3107:22;3089:41;;3077:2;3062:18;1496:287:29;;;;;;;1081:371;;;;;;:::i;:::-;;:::i;1496:287::-;1705:12;;:19;1567:4;;1705:24;:71;;;;-1:-1:-1;1733:13:29;;;;;:29;;:43;1705:71;1698:78;1496:287;-1:-1:-1;;1496:287:29:o;1081:371::-;1258:4;1396:16;;:49;;;;-1:-1:-1;1416:29:29;;1396:49;1389:56;1081:371;-1:-1:-1;;;;;;1081:371:29:o;14:127:37:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:252;217:2;211:9;259:4;247:17;;294:18;279:34;;315:22;;;276:62;273:88;;;341:18;;:::i;:::-;377:2;370:22;146:252;:::o;403:250::-;474:2;468:9;;;504:15;;549:18;534:34;;570:22;;;531:62;528:88;;;596:18;;:::i;658:275::-;729:2;723:9;794:2;775:13;;-1:-1:-1;;771:27:37;759:40;;829:18;814:34;;850:22;;;811:62;808:88;;;876:18;;:::i;:::-;912:2;905:22;658:275;;-1:-1:-1;658:275:37:o;938:886::-;997:5;1036:9;1031:3;1027:19;1066:4;1062:2;1058:13;1055:33;;;1084:1;1081;1074:12;1055:33;1106:21;;:::i;:::-;1097:30;;1163:9;1150:23;1143:5;1136:38;1234:2;1223:9;1219:18;1206:32;1201:2;1194:5;1190:14;1183:56;1273:2;1267;1263:7;1259:2;1255:16;1251:25;1248:45;;;1289:1;1286;1279:12;1248:45;;1317:21;;:::i;:::-;1390:2;1379:9;1375:18;1362:32;1425:1;1416:7;1413:14;1403:42;;1441:1;1438;1431:12;1403:42;1454:24;;1530:2;1515:18;;1502:32;1578:4;1565:18;;1553:31;;1543:59;;1598:1;1595;1588:12;1543:59;1636:7;1631:2;1622:7;1618:16;1611:33;;1676:7;1671:2;1664:5;1660:14;1653:31;;1744:3;1733:9;1729:19;1716:33;1711:2;1704:5;1700:14;1693:57;1811:4;1800:9;1796:20;1783:34;1777:3;1770:5;1766:15;1759:59;938:886;;;;:::o;1829:1115::-;1914:6;1945:2;1988;1976:9;1967:7;1963:23;1959:32;1956:52;;;2004:1;2001;1994:12;1956:52;2044:9;2031:23;2073:18;2114:2;2106:6;2103:14;2100:34;;;2130:1;2127;2120:12;2100:34;2153:22;;;;2209:4;2191:16;;;2187:27;2184:47;;;2227:1;2224;2217:12;2184:47;2253:21;;:::i;:::-;2312:2;2299:16;2340:2;2330:8;2327:16;2324:36;;;2356:1;2353;2346:12;2324:36;2379:17;;2427:4;2419:13;;2415:27;-1:-1:-1;2405:55:37;;2456:1;2453;2446:12;2405:55;2492:2;2479:16;2514:2;2510;2507:10;2504:36;;;2520:18;;:::i;:::-;2562:53;2605:2;2586:13;;-1:-1:-1;;2582:27:37;2578:36;;2562:53;:::i;:::-;2549:66;;2638:2;2631:5;2624:17;2678:7;2673:2;2668;2664;2660:11;2656:20;2653:33;2650:53;;;2699:1;2696;2689:12;2650:53;2754:2;2749;2745;2741:11;2736:2;2729:5;2725:14;2712:45;2798:1;2777:14;;;2773:23;;2766:34;-1:-1:-1;2809:20:37;;;2861:52;2905:7;2892:11;;;2861:52;:::i;:::-;2856:2;2849:5;2845:14;2838:76;2933:5;2923:15;;;;;;1829:1115;;;;:::o;3141:802::-;3238:6;3246;3254;3262;3270;3323:3;3311:9;3302:7;3298:23;3294:33;3291:53;;;3340:1;3337;3330:12;3291:53;3380:9;3367:23;3409:18;3450:2;3442:6;3439:14;3436:34;;;3466:1;3463;3456:12;3436:34;3504:6;3493:9;3489:22;3479:32;;3549:7;3542:4;3538:2;3534:13;3530:27;3520:55;;3571:1;3568;3561:12;3520:55;3611:2;3598:16;3637:2;3629:6;3626:14;3623:34;;;3653:1;3650;3643:12;3623:34;3700:7;3693:4;3684:6;3680:2;3676:15;3672:26;3669:39;3666:59;;;3721:1;3718;3711:12;3666:59;3752:4;3744:13;;;;3776:6;;-1:-1:-1;3814:20:37;;;3801:34;;3882:2;3867:18;;3854:32;;-1:-1:-1;3933:2:37;3918:18;3905:32;;-1:-1:-1;3141:802:37;;-1:-1:-1;;;;3141:802:37:o","linkReferences":{}},"methodIdentifiers":{"verify(bytes,bytes32,bytes32,bytes32)":"6efef009","verify_integrity((bytes,(bytes32,bytes32,(uint8,uint8),bytes32,bytes32)))":"1bb8068f"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"seal\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"postStateDigest\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"seal\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"preStateDigest\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"postStateDigest\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"enum SystemExitCode\",\"name\":\"system\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"user\",\"type\":\"uint8\"}],\"internalType\":\"struct ExitCode\",\"name\":\"exitCode\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"input\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"output\",\"type\":\"bytes32\"}],\"internalType\":\"struct ReceiptClaim\",\"name\":\"claim\",\"type\":\"tuple\"}],\"internalType\":\"struct Receipt\",\"name\":\"receipt\",\"type\":\"tuple\"}],\"name\":\"verify_integrity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"verify(bytes,bytes32,bytes32,bytes32)\":{\"details\":\"This method additionally ensures that the input hash is all-zeros (i.e. no committed input), the exit code is (Halted, 0), and there are no assumptions (i.e. the receipt is unconditional).\",\"params\":{\"imageId\":\"The identifier for the guest program.\",\"journalDigest\":\"The SHA-256 digest of the journal bytes.\",\"postStateDigest\":\"A hash of the final memory state. Required to run the verifier, but     otherwise can be left unconstrained for most use cases.\",\"seal\":\"The encoded cryptographic proof (i.e. SNARK).\"},\"returns\":{\"_0\":\"true if the receipt passes the verification checks. The return code must be checked.\"}},\"verify_integrity((bytes,(bytes32,bytes32,(uint8,uint8),bytes32,bytes32)))\":{\"params\":{\"receipt\":\"The receipt to be verified.\"},\"returns\":{\"_0\":\"true if the receipt passes the verification checks. The return code must be checked.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"verify(bytes,bytes32,bytes32,bytes32)\":{\"notice\":\"Verify that the given seal is a valid RISC Zero proof of execution with the     given image ID, post-state digest, and journal digest.\"},\"verify_integrity((bytes,(bytes32,bytes32,(uint8,uint8),bytes32,bytes32)))\":{\"notice\":\"Verify that the given receipt is a valid RISC Zero receipt, ensuring the `seal` is valid a cryptographic proof of the execution with the given `claim`.\"}},\"notice\":\"Mock verifier contract for RISC Zero receipts of execution.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/risc0-ethereum/contracts/src/MockRiscZeroVerifier.sol\":\"MockRiscZeroVerifier\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":murky/=lib/murky/\",\":murky_differential_testing/=lib/murky/differential_testing/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/\",\":risc0-ethereum/=lib/risc0-ethereum/\",\":risc0/=lib/risc0-ethereum/contracts/src/\",\":solidity-bytes-utils/=lib/solidity-bytes-utils/contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol\":{\"keccak256\":\"0x8cd59334ed58b8884cd1f775afc9400db702e674e5d6a7a438c655b9de788d7e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://99e62c7de7318f413b6352e3f2704ca23e7725ff144e43c8bd574d12dbf29047\",\"dweb:/ipfs/QmSEXG2rBx1VxU2uFTWdiChjDvA4osEY2mesjmoVeVhHko\"]},\"lib/risc0-ethereum/contracts/src/IRiscZeroVerifier.sol\":{\"keccak256\":\"0xd3cad602ba22ad791f400151dfa857eb1c77180bde8e64d08beea7079ecdde1f\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://daf83fb3d25c335b26d3af2dfcede662039051c5f8b02e2d83611d9863e9b09e\",\"dweb:/ipfs/QmVtabuJi73s7NfA1TCi2ZiC9PmxJzVXjadQwNGCcinySu\"]},\"lib/risc0-ethereum/contracts/src/MockRiscZeroVerifier.sol\":{\"keccak256\":\"0xdec51c4441779cf994a4db98eb0a30c9cac99f3fc87bc335e2ccbcaa193641e3\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://649b6dc95d86de2f87b2784bd8912a9ec0cad17bdd684120183765ec272e3251\",\"dweb:/ipfs/QmZzysmc5chtoJV4Gvy15RRd4S26ePH7AK5oAwwCSNXnyQ\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.21+commit.d9974bed"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"bytes","name":"seal","type":"bytes"},{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"bytes32","name":"postStateDigest","type":"bytes32"},{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function","name":"verify","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"struct Receipt","name":"receipt","type":"tuple","components":[{"internalType":"bytes","name":"seal","type":"bytes"},{"internalType":"struct ReceiptClaim","name":"claim","type":"tuple","components":[{"internalType":"bytes32","name":"preStateDigest","type":"bytes32"},{"internalType":"bytes32","name":"postStateDigest","type":"bytes32"},{"internalType":"struct ExitCode","name":"exitCode","type":"tuple","components":[{"internalType":"enum SystemExitCode","name":"system","type":"uint8"},{"internalType":"uint8","name":"user","type":"uint8"}]},{"internalType":"bytes32","name":"input","type":"bytes32"},{"internalType":"bytes32","name":"output","type":"bytes32"}]}]}],"stateMutability":"pure","type":"function","name":"verify_integrity","outputs":[{"internalType":"bool","name":"","type":"bool"}]}],"devdoc":{"kind":"dev","methods":{"verify(bytes,bytes32,bytes32,bytes32)":{"details":"This method additionally ensures that the input hash is all-zeros (i.e. no committed input), the exit code is (Halted, 0), and there are no assumptions (i.e. the receipt is unconditional).","params":{"imageId":"The identifier for the guest program.","journalDigest":"The SHA-256 digest of the journal bytes.","postStateDigest":"A hash of the final memory state. Required to run the verifier, but     otherwise can be left unconstrained for most use cases.","seal":"The encoded cryptographic proof (i.e. SNARK)."},"returns":{"_0":"true if the receipt passes the verification checks. The return code must be checked."}},"verify_integrity((bytes,(bytes32,bytes32,(uint8,uint8),bytes32,bytes32)))":{"params":{"receipt":"The receipt to be verified."},"returns":{"_0":"true if the receipt passes the verification checks. The return code must be checked."}}},"version":1},"userdoc":{"kind":"user","methods":{"verify(bytes,bytes32,bytes32,bytes32)":{"notice":"Verify that the given seal is a valid RISC Zero proof of execution with the     given image ID, post-state digest, and journal digest."},"verify_integrity((bytes,(bytes32,bytes32,(uint8,uint8),bytes32,bytes32)))":{"notice":"Verify that the given receipt is a valid RISC Zero receipt, ensuring the `seal` is valid a cryptographic proof of the execution with the given `claim`."}},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","ds-test/=lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","murky/=lib/murky/","murky_differential_testing/=lib/murky/differential_testing/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts/","risc0-ethereum/=lib/risc0-ethereum/","risc0/=lib/risc0-ethereum/contracts/src/","solidity-bytes-utils/=lib/solidity-bytes-utils/contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/risc0-ethereum/contracts/src/MockRiscZeroVerifier.sol":"MockRiscZeroVerifier"},"evmVersion":"paris","libraries":{}},"sources":{"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"keccak256":"0x8cd59334ed58b8884cd1f775afc9400db702e674e5d6a7a438c655b9de788d7e","urls":["bzz-raw://99e62c7de7318f413b6352e3f2704ca23e7725ff144e43c8bd574d12dbf29047","dweb:/ipfs/QmSEXG2rBx1VxU2uFTWdiChjDvA4osEY2mesjmoVeVhHko"],"license":"MIT"},"lib/risc0-ethereum/contracts/src/IRiscZeroVerifier.sol":{"keccak256":"0xd3cad602ba22ad791f400151dfa857eb1c77180bde8e64d08beea7079ecdde1f","urls":["bzz-raw://daf83fb3d25c335b26d3af2dfcede662039051c5f8b02e2d83611d9863e9b09e","dweb:/ipfs/QmVtabuJi73s7NfA1TCi2ZiC9PmxJzVXjadQwNGCcinySu"],"license":"Apache-2.0"},"lib/risc0-ethereum/contracts/src/MockRiscZeroVerifier.sol":{"keccak256":"0xdec51c4441779cf994a4db98eb0a30c9cac99f3fc87bc335e2ccbcaa193641e3","urls":["bzz-raw://649b6dc95d86de2f87b2784bd8912a9ec0cad17bdd684120183765ec272e3251","dweb:/ipfs/QmZzysmc5chtoJV4Gvy15RRd4S26ePH7AK5oAwwCSNXnyQ"],"license":"Apache-2.0"}},"version":1},"id":29}